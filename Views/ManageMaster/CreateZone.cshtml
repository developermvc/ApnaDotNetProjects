@model LumaxDMS.Models.ZoneModel
@using LumaxDMS.AppCode
@using (Html.BeginForm("CreateZone", "ManageMaster", FormMethod.Post, new { }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Zone_Id)
    @Html.HiddenFor(m => m.selectedstateids)

    <div class="card card_ps">
        <div class="header_ps">
            <span id="zoneformtitle">CREATE ZONE </span>
        </div>
        <div id="dv_displaydetail" class="card-body" style="padding-top: 20px;">
            <div class="row">
                <div class="col-lg-2 col-xs-12">
                    <label for="pwd" class="redlabel">
                        Country Name:
                    </label>
                </div>
                <div class="col-lg-2 col-xs-12">
                    @Html.DropDownListFor(model => model.SelectedCountryId, new SelectList(Model.countryMasterList, "Country_Id", "CountryName"), "--Select--", new { @class = "form-control chosen-select", @onchange = "return GetStateByCountryId(this);" })
                    @Html.ValidationMessageFor(model => model.SelectedCountryId)
                </div>
                <div class="col-lg-2 col-xs-12">
                    <label for="pwd" class="redlabel">
                        Zone Name:
                    </label>
                </div>
                <div class="col-lg-2 col-xs-12">
                    @Html.TextBoxFor(model => model.ZoneName, new { @class = "form-control", onclick = "selectCountryBeforeZone()", onblur = "return CheckZoneValidation(this)", autocomplete = "off", title = "Enter zone name" })
                    @Html.ValidationMessageFor(model => model.ZoneName)
                </div>
                <div class="col-lg-2 col-xs-12">
                    <label for="pwd" class="redlabel">
                        Zone Desc:
                    </label>
                </div>
                <div class="col-lg-2 col-xs-12">
                    @Html.TextBoxFor(model => model.ZoneDesc, new { @class = "form-control", autocomplete = "off", title = "Enter zone Desc" })
                    @Html.ValidationMessageFor(model => model.ZoneDesc)
                </div>
            </div>
            <div class="row row_pt">
                <div class="col-lg-2 col-xs-12">
                    <label for="pwd">
                        IsActive:
                    </label>
                </div>
                <div class="col-lg-2 col-xs-12">
                    @Html.CheckBoxFor(model => model.IsActive)
                </div>
            </div>
            <div class="container-fluid">
                <br />
                <div class="row">
                    <div class="dual-list list-left col-md-5">
                        <div class="well well_bg">
                            <div class="row">
                                <div class="col-md-10">
                                    <div class="input-group">
                                        <i class="fa fa-search" aria-hidden="true" style="padding: 8px 8px; background: #ddd;">
                                        </i>
                                        <input type="text" name="SearchDualList" class="form-control" placeholder="search" />
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="btn-group list_bg">
                                        <a class="btn btn-default selector" title="select all" style="border: 1px solid #ccc;
                                            background: #fff; margin-left: -5px; position: relative; bottom: 10px;">
                                            <i class="fa fa-check-square-o" aria-hidden="true"
                                               style="font-size: 13px;"></i>
                                        </a>
                                    </div>
                                </div>
                            </div>
                            <ul class="list-group" id="momentlistLeft"></ul>
                        </div>
                    </div>
                    <div class="list-arrows col-md-1 text-center">
                        <button class="btn btn-default btn-sm move-left" type="button" style="background: #fff;
                            border: 1px solid #ddd;">
                            <i class="fa fa-chevron-left" aria-hidden="true"></i>
                        </button>
                        <button class="btn btn-default btn-sm move-right" type="button" style="background: #fff;
                            border: 1px solid #ddd;">
                            <i class="fa fa-chevron-right" aria-hidden="true"></i>
                        </button>
                    </div>
                    <div class="dual-list list-right col-md-5">
                        <div class="well">
                            <div class="row">
                                <div class="col-md-2">
                                    <div class="btn-group">
                                        <a class="btn btn-default selector" title="select all">
                                            <a class="btn btn-default selector"
                                               title="select all" style="border: 1px solid #ccc; background: #fff; margin-left: -25px;">
                                                <i class="fa fa-check-square-o" aria-hidden="true" style="font-size: 13px;"></i>
                                            </a>
                                    </div>
                                </div>
                                <div class="col-md-10">
                                    <div class="input-group">
                                        <i class="fa fa-search" aria-hidden="true" style="padding: 8px 8px; background: #ddd;">
                                        </i>
                                        <input type="text" name="SearchDualList" class="form-control" placeholder="search">
                                    </div>
                                </div>
                            </div>
                            <ul class="list-group list_bg2" id="momentlistRight"></ul>
                            @Html.ValidationMessageFor(m => m.zoneMasterList)
                        </div>
                    </div>
                </div>
            </div>
            <br />
        </div>
        <hr />
        <div class="row" style="">
            <div class="col-lg-12 text-right margin_lf">
                @if (Model.PermissionNameList.Contains(Constants.PermissionName.CREATE))
                {
                    <input type="submit" name="btntype" value="Create" id="btnadd" class="btn btn-primary"
                           onclick="return CheckValidation();" />
                }
                @if (Model.PermissionNameList.Contains(Constants.PermissionName.EDIT))
                {
                    <input type="submit" class="btn btn-primary" name="btntype" value="Update" style="display: none"
                           id="btnupdate" onclick="return CheckValidation();" />
                }
                <input type="button" class="btn btn-primary" name="btntype" value="Clear" onclick="return resetform()" />
            </div>
        </div>
    </div>
}
<script src="/Scripts/moment.min.js" type="text/javascript"></script>
<script src="/Scripts/ProjectJS/ManageMaster_Common.js" type="text/javascript"></script>
<script type="text/javascript">

    function CheckZoneValidation(zone_id) {
        debugger;
        var checkUrl = '@Url.Action("CheckIszoneExist", "ManageMaster")';
        var ZoneId = $('#Zone_Id').val();
        var zoneName = $('#ZoneName').val();
        var countryID = $('#SelectedCountryId').val();

        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: checkUrl,
            data: JSON.stringify({ zoneName: zoneName, zoneId: ZoneId, countryID: countryID }),
            dataType: "json",
            success: function (data) {
                if (!data) {
                    alert("Zone Name already exists");
                    $('#ZoneName').val('');
                    $('#ZoneName').focus();
                }
            },
            error: function (data) {

            }
        });

    }


    function EditZone(ZoneId) {

        var checkUrl = '@Url.Action("EditZone", "ManageMaster")';
        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: checkUrl,
            data: JSON.stringify({ Zone_Id: ZoneId }),
            dataType: "json",
            success: EditZoneSucceeded,
            error: EditZoneFailed
        });


    }

    function EditZoneSucceeded(result) {
        debugger;

        $('#Zone_Id').val(result.zonemaster.ZONE_ID);
        $('#ZoneName').val(result.zonemaster.ZONENAME);
        $('#ZoneDesc').val(result.zonemaster.ZONEDESC);
        $('#SelectedCountryId').val(result.zonemaster.COUNTRY_ID).trigger("chosen:updated");
        if (result.zonemaster.ISACTIVE == "Y") {
            $('#IsActive').prop('checked', true);
        }
        else {
            $('#IsActive').prop('checked', false);
        }

        $('#btnupdate').show();
        $('#btnadd').hide();
        $('#zoneformtitle').text("UPDATE ZONE");

        FillStateListIntoMomentLeft(result.StateList);
        FillStateListIntoMomentRight(result.zonemaster.zoneStateMasterList);
    }

    function EditZoneFailed() {

    }

    function resetform() {
        window.location.href = "/ManageMaster/ZoneList";
    }

    function FillStateList(statelist) {
        var v = "<option>--Select--</option>";
        $.each(statelist, function (i, state) {

            v += "<option value=" + state.STATE_ID + ">" + state.STATENAME + "</option>";

        });

        $("#SelectedStateId").html(v);
        $("#SelectedStateId").trigger("chosen:updated");
    }

    function GetStateByCountryId(obj) {
        $('#momentlistRight').html('');
        $('#ZoneName').val('');
        var CountryId = obj.value;
        var checkUrl = '@Url.Action("GetStateByCountryIdNotInExistingZone", "ManageMaster")';
        $.ajax({
            url: checkUrl,
            type: "GET",
            dataType: "JSON",
            data: { CountryId: CountryId },
            success: FillStateListIntoMomentLeft,
            error: GetStateByCountryIdFail
        });
    }

    function GetStateByCountryIdFail() { }

    function selectCountryBeforeZone() {
        if ($('#SelectedCountryId').val() == '') {
            $('#SelectedCountryId').trigger('chosen:activate');
            alert('Select Country');
        }
    }

    function CheckValidation() {
        debugger;
        var valid = true;
        var countryid = $('#SelectedCountryId').val();
        if (countryid == "" || countryid == null) {
            $('#SelectedCountryId').trigger('chosen:activate');
            alert("Please select country");
            valid = false;
        }
        if (valid) {
            valid = FillStateIds();
            if (valid == false) {
                alert("Please add atleast one State");
            }
        }
        return valid;
    }

    $(function () {

        $('body').on('click', '.list-group .list-group-item', function () {
            $(this).toggleClass('active');
        });
        $('.list-arrows button').click(function () {
            var $button = $(this), actives = '';
            if ($button.hasClass('move-left')) {
                actives = $('.list-right ul li.active');
                actives.clone().appendTo('.list-left ul');
                actives.remove();
            } else if ($button.hasClass('move-right')) {
                actives = $('.list-left ul li.active');
                actives.clone().appendTo('.list-right ul');
                actives.remove();
            }
        });
        $('.dual-list .selector').click(function () {
            var $checkBox = $(this);
            if (!$checkBox.hasClass('selected')) {
                $checkBox.addClass('selected').closest('.well').find('ul li:not(.active)').addClass('active');
                $checkBox.children('i').removeClass('glyphicon-unchecked').addClass('glyphicon-check');
            } else {
                $checkBox.removeClass('selected').closest('.well').find('ul li.active').removeClass('active');
                $checkBox.children('i').removeClass('glyphicon-check').addClass('glyphicon-unchecked');
            }
        });
        $('[name="SearchDualList"]').keyup(function (e) {
            var code = e.keyCode || e.which;
            if (code == '9') return;
            if (code == '27') $(this).val(null);
            var $rows = $(this).closest('.dual-list').find('.list-group li');
            var val = $.trim($(this).val()).replace(/ +/g, ' ').toLowerCase();
            $rows.show().filter(function () {
                var text = $(this).text().replace(/\s+/g, ' ').toLowerCase();
                return ! ~text.indexOf(val);
            }).hide();
        });

    });

    function FillStateIds() {
        debugger;
        document.getElementById("selectedstateids").value = "";
        var arr = new Array();
        var result = $('#momentlistRight').find("input");
        var i = 0; var l = result.length;
        for (i == 0; i < l; i++) {
            var stateid = result[i].value;
            arr.push(stateid);

        }
        document.getElementById("selectedstateids").value = arr;
        if (i > 0) {
            return true;
        }
        else {
            return false;
        }
    }
</script>
